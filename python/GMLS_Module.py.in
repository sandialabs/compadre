# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GMLS_Module')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GMLS_Module')
    _GMLS_Module = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GMLS_Module', [dirname(__file__)])
        except ImportError:
            import _GMLS_Module
            return _GMLS_Module
        try:
            _mod = imp.load_module('_GMLS_Module', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GMLS_Module = swig_import_helper()
    del swig_import_helper
else:
    import _GMLS_Module
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Kokkos_Python(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kokkos_Python, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kokkos_Python, name)
    __repr__ = _swig_repr

    def __init__(self, num_threads=1, numa=1, device=0, ngpu=1, print_status=False):
        this = _GMLS_Module.new_Kokkos_Python(num_threads, numa, device, ngpu, print_status)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GMLS_Module.delete_Kokkos_Python
    __del__ = lambda self: None
Kokkos_Python_swigregister = _GMLS_Module.Kokkos_Python_swigregister
Kokkos_Python_swigregister(Kokkos_Python)


def initializeKokkos():
    return _GMLS_Module.initializeKokkos()
initializeKokkos = _GMLS_Module.initializeKokkos

def finalizeKokkos():
    return _GMLS_Module.finalizeKokkos()
finalizeKokkos = _GMLS_Module.finalizeKokkos
class GMLS_Python(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GMLS_Python, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GMLS_Python, name)
    __repr__ = _swig_repr

    def __init__(self, poly_order, dense_solver_type, curvature_poly_order, dimensions):
        this = _GMLS_Module.new_GMLS_Python(poly_order, dense_solver_type, curvature_poly_order, dimensions)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GMLS_Module.delete_GMLS_Python
    __del__ = lambda self: None

    def setWeightingOrder(self, regular_weight, curvature_weight=-1):
        return _GMLS_Module.GMLS_Python_setWeightingOrder(self, regular_weight, curvature_weight)

    def setNeighbors(self, pyObjectArray_in):
        return _GMLS_Module.GMLS_Python_setNeighbors(self, pyObjectArray_in)

    def getNeighborLists(self):
        return _GMLS_Module.GMLS_Python_getNeighborLists(self)

    def setSourceSites(self, pyObjectArray_in):
        return _GMLS_Module.GMLS_Python_setSourceSites(self, pyObjectArray_in)

    def getSourceSites(self):
        return _GMLS_Module.GMLS_Python_getSourceSites(self)

    def setTargetSites(self, pyObjectArray_in):
        return _GMLS_Module.GMLS_Python_setTargetSites(self, pyObjectArray_in)

    def getTargetSites(self):
        return _GMLS_Module.GMLS_Python_getTargetSites(self)

    def setWindowSizes(self, pyObjectArray_in):
        return _GMLS_Module.GMLS_Python_setWindowSizes(self, pyObjectArray_in)

    def getWindowSizes(self):
        return _GMLS_Module.GMLS_Python_getWindowSizes(self)

    def generatePointEvaluationStencil(self):
        return _GMLS_Module.GMLS_Python_generatePointEvaluationStencil(self)

    def getPolynomialCoefficients(self, pyObjectArray_in):
        return _GMLS_Module.GMLS_Python_getPolynomialCoefficients(self, pyObjectArray_in)

    def getAlphas0Tensor(self, target_num, pyObjectArray_neighborList):
        return _GMLS_Module.GMLS_Python_getAlphas0Tensor(self, target_num, pyObjectArray_neighborList)

    def applyStencil(self, *args):
        return _GMLS_Module.GMLS_Python_applyStencil(self, *args)

    def generateKDTree(self, pyObjectArray_in):
        return _GMLS_Module.GMLS_Python_generateKDTree(self, pyObjectArray_in)

    def generateNeighborListsFromKNNSearchAndSet(self, pyObjectArray_in, poly_order, dimension=3, epsilon_multiplier=1.6, maximum_neighbors_storage_multiplier=1.0, max_search_radius=False):
        return _GMLS_Module.GMLS_Python_generateNeighborListsFromKNNSearchAndSet(self, pyObjectArray_in, poly_order, dimension, epsilon_multiplier, maximum_neighbors_storage_multiplier, max_search_radius)
GMLS_Python_swigregister = _GMLS_Module.GMLS_Python_swigregister
GMLS_Python_swigregister(GMLS_Python)


def getNP(poly_order, dimensions):
    return _GMLS_Module.getNP(poly_order, dimensions)
getNP = _GMLS_Module.getNP

def getNN(poly_order, dimensions):
    return _GMLS_Module.getNN(poly_order, dimensions)
getNN = _GMLS_Module.getNN
# This file is compatible with both classic and new-style classes.


