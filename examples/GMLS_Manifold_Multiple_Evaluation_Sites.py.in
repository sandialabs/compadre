import subprocess
import os
import re
import math
import sys


def check_bounds(porder, rate):
    if (porder=="1"):
        if rate<3 and rate>.9:
            return True
        else:
            return False
    else:
        if rate>float(porder)-2.3:
            return True
        else:
            return False

num_target_sites = 100

porder = 3
if (len(sys.argv) > 1):
    porder = int(sys.argv[1])

grids = 2
if (len(sys.argv) > 2):
    grids = int(sys.argv[2])

errors = []

target_operators=("Tangent Bundle", "Point Value", "Gaussian Curvature", "Surface Vector \(VectorBasis\)", "Surface Vector \(ScalarClones\)", "Surface Curl \(Ambient\)")#, "","Surface Gradient (Manifold)", 
for operator in target_operators:
    errors.append([])

for grid_num in range(grids):
    with open(os.devnull, 'w') as devnull:
        output_commands = ["@CMAKE_CURRENT_BINARY_DIR@/GMLS_Manifold_MultiSite_Test","%d"%porder,"%d"%num_target_sites,"3","1","%d"%(20*num_target_sites*pow(4,grid_num)),"0","0"]
        print(output_commands)
        output = subprocess.check_output(output_commands, stderr=devnull)
        #print(output)
        for key, operator in enumerate(target_operators):
            m = re.search('(?<=%s Error: )[0-9]+\.?[0-9]*(?:[Ee]\ *-?\ *[0-9]+)?'%operator, output.decode('utf-8'))
            try:
                errors[key].append(float(m.group(0)))
            except:
                print("Program exited early. Regular expression search for error failed.")
                exit(-1)
    
print(errors)

for key, operator in enumerate(target_operators):
    print("\n\n%s rates: porder:%s\n============="%(operator.replace('\\',''), porder))
    for i in range(1,len(errors[key])):
        if (errors[key][i]!=0):
            rate = math.log(errors[key][i]/errors[key][i-1])/math.log(.5)
            print(str(rate) + ", " + str(errors[key][i]) + ", " + str(errors[key][i-1]))
            #assert(check_bounds(porder, rate))
        else:
            print("NaN - Division by zero")
    
sys.exit(0)
